loop:
    ldi 0x1000 r1 # buffer address
    ldi 80 r2     # buffer size
    call input
    ldi 0xa r3
    wl r3
    call print
    ldi 0xa r3
    wl r3
    jmp loop

input: func # r1: bufptr, r2: buflen  clobbers: r2, r3, r4, r5, r6, r7, r8, r9, r10
    ldi 0x000d r3
    ldi 0x0d00 r4
    ldi 0x00ff r5
    ldi 0xff00 r6
    cp r1 r10
    xor r9 r9
    loop:
        rl r7        # read into lower r7
        wl r7        # echo
        addi 1 r9    # increment length
        st r10 r7    # store r7 to buffer
        cp r7 r8     # check
        and r5 r8    #  if
        xor r3 r8    #   carriage return
        ifz jmp done # if true then done
        rh r7        # read into higher r7
        wh r7        # echo
        addi 1 r9    # increment length
        st r10 r7    # store r7 to buffer
        addi 1 r10   # increment buffer pointer
        cp r7 r8     # check
        and r6 r8    #  if
        xor r4 r8    #   carriage return
        ifz jmp done # if true then done
        addi -1 r2   # decrement buflen
        ifz jmp done # if zero then buffer full
        jmp loop     # 
    done:            # 
    cp r9 r2 ret     # 
endfunc

print: func # r1: strptr, r2: strlen   clobbers: r1, r3, r4
    ldi 0xfffe r3        
    and r2 r3            # get number of words containing 2 characters each
    ifz jmp done         # if 0 then just one character
    shf 1 r3             # divide even length by 2
    loop:            
        ld r1 r4     
        wl r4        
        wh r4         
        addi 1 r1     
        addi -1 r3    
        ifp jmp loop  
    done:                
    addi 1 r3            # reusing r3 which is now 0
    and r2 r3            # find out if there is one more character in next word
    ifz cp r3 r3  ret    # nop and return if no trailing character
    ld r1 r4         # write the
    wl r4  ret       #   last character
endfunc

