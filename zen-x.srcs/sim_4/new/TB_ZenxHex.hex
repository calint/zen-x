// ldi 0x0000 r1
1033 // [0] 1:1
0000 // [1] 1:1
// ldi 0x0001 r10
A033 // [2] 2:1
0001 // [3] 2:1
// ldi 0x20 r11
B033 // [4] 3:1
0020 // [5] 3:1
// loop:
//     call print_hex
001B // [6] 5:5
//     cp r1 r2
21C3 // [7] 6:5
//     shf 8 r2
27E3 // [8] 7:5
//     led r2
2733 // [9] 8:5
//     wl r11
B233 // [10] 9:5
//     add r10 r1
1A03 // [11] 10:5
//     jmp loop
FFAF // [12] 11:5
0000
0000
0000
// 
// print_hex: func # r1: number   clobbers: r2 r3 r4 r5 r6 r7
//     ldi 0x0f r2    # bit mask
2033 // [16] 14:5
000F // [17] 14:5
//     ldi 10 r3      # constant 10 for compare
3033 // [18] 15:5
000A // [19] 15:5
//     ldi 0x30 r4    # bits to 'or' to map number to ascii 0-9
4033 // [20] 16:5
0030 // [21] 16:5
//     ldi 0x41 r5    # ascii 'A'
5033 // [22] 17:5
0041 // [23] 17:5
// 
//     # bits 15:12
//     cp r1 r7           # don't clobber r1
71C3 // [24] 20:5
//     shf 4 r7           # shift to
73E3 // [25] 21:5
//     shf 8 r7           #   lowest nibble
77E3 // [26] 22:5
//     cp r7 r6           # 
67C3 // [27] 23:5
//     sub r3 r6          # compare with 10
6323 // [28] 24:5
//     ifp jmp letter4    # if r6 > r3
005C // [29] 25:5
//     ifz jmp letter4    # if r6 == r3
004D // [30] 26:5
//         or r4 r7       # nibble below 10, 'or' 0x30 to get ascii digit 0-9
7443 // [31] 27:9
//         wl r7          # write ascii 0-9
7233 // [32] 28:9
//         jmp hex3       # next nibble
003F // [33] 29:9
//     letter4:           # nibble 10 or above
//     add r5 r6          # 'A' + r6
6503 // [34] 31:5
//     wl r6              # write ascii a-f
6233 // [35] 32:5
// 
//     # bits 11:8
//     hex3:
//     cp r1 r7           # don't clobber r1
71C3 // [36] 36:5
//     shf 8 r7           # shift to lowest nibble
77E3 // [37] 37:5
//     and r2 r7          # bit mask lowest nibble
7283 // [38] 38:5
//     cp r7 r6           # compare with
67C3 // [39] 39:5
//     sub r3 r6          #   10
6323 // [40] 40:5
//     ifp jmp letter3    # if greater
005C // [41] 41:5
//     ifz jmp letter3    # if equal
004D // [42] 42:5
//         or r4 r7       
7443 // [43] 43:9
//         wl r7
7233 // [44] 44:9
//         jmp hex2
003F // [45] 45:9
//     letter3:            
//     add r5 r6          
6503 // [46] 47:5
//     wl r6              
6233 // [47] 48:5
// 
//     # bits 7:4
//     hex2:
//     cp r1 r7           
71C3 // [48] 52:5
//     shf 4 r7           
73E3 // [49] 53:5
//     and r2 r7
7283 // [50] 54:5
//     cp r7 r6           
67C3 // [51] 55:5
//     sub r3 r6          
6323 // [52] 56:5
//     ifp jmp letter2    
005C // [53] 57:5
//     ifz jmp letter2    
004D // [54] 58:5
//         or r4 r7       
7443 // [55] 59:9
//         wl r7
7233 // [56] 60:9
//         jmp hex1
003F // [57] 61:9
//     letter2:           
//     add r5 r6          
6503 // [58] 63:5
//     wl r6              
6233 // [59] 64:5
// 
//     # bits 3:0
//     hex1:
//     cp r1 r7           
71C3 // [60] 68:5
//     and r2 r7
7283 // [61] 69:5
//     cp r7 r6           
67C3 // [62] 70:5
//     sub r3 r6          
6323 // [63] 71:5
//     ifp jmp letter1    
004C // [64] 72:5
//     ifz jmp letter1    
003D // [65] 73:5
//         or r4 r7       
7443 // [66] 74:9
//         wl r7  ret
7237 // [67] 75:9
//     letter1:          
//     add r5 r6         
6503 // [68] 77:5
//     wl r6  ret
6237 // [69] 78:5
// 
// endfunc

