ldi 0x0000 r1
ldi 0x0001 r10
ldi 0x20 r11
loop:
    call print_hex
    wl r11
    add r10 r1
    jmp loop

print_hex: func # r1: number   clobbers: r2 r3 r4 r5 r6 r7
    ldi 0x0f r2    # bit mask
    ldi 10 r3      # constant 10 for compare
    ldi 0x30 r4    # bits to 'or' to map number to ascii 0-9
    ldi 0x41 r5    # ascii 'A'

    # bits 15:12
    cp r1 r7           # don't clobber r1
    shf 4 r7           # shift to
    shf 8 r7           #   lowest nibble
    cp r7 r6           # 
    sub r3 r6          # compare with 10
    ifp jmp letter4    # if r6 > r3
    ifz jmp letter4    # if r6 == r3
        or r4 r7       # nibble below 10, 'or' 0x30 to get ascii digit 0-9
        wl r7          # write ascii 0-9
        jmp hex3       # next nibble
    letter4:           # nibble 10 or above
    add r5 r6          # 'A' + r6
    wl r6              # write ascii a-f

    # bits 11:8
    hex3:
    cp r1 r7           # don't clobber r1
    shf 8 r7           # shift to lowest nibble
    and r2 r7          # bit mask lowest nibble
    cp r7 r6           # compare with
    sub r3 r6          #   10
    ifp jmp letter3    # if greater
    ifz jmp letter3    # if equal
        or r4 r7       
        wl r7
        jmp hex2
    letter3:            
    add r5 r6          
    wl r6              

    # bits 7:4
    hex2:
    cp r1 r7           
    shf 4 r7           
    and r2 r7
    cp r7 r6           
    sub r3 r6          
    ifp jmp letter2    
    ifz jmp letter2    
        or r4 r7       
        wl r7
        jmp hex1
    letter2:           
    add r5 r6          
    wl r6              

    # bits 3:0
    hex1:
    cp r1 r7           
    and r2 r7
    cp r7 r6           
    sub r3 r6          
    ifp jmp letter1    
    ifz jmp letter1    
        or r4 r7       
        wl r7  ret
    letter1:          
    add r5 r6         
    wl r6  ret

endfunc
