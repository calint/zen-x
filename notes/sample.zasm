ldi 0x1000 r1
ldi 0x1000 r9
loop:
    call print_hex
    add r9 r1
    jmp loop

print_hex: func # r1: number
    ldi 0xf000 r2  # used to 'and' the higher bits
    ldi 10 r3      # constant 10 for compare
    ldi 0x30 r4    # bits to 'or' to map number to ascii 0-9
    ldi 0x41 r5    # ascii prior to 'A'

    # bits 15:12
    cp r1 r7           # i.e. 0x3abc
    shf 4 r7           # shift to lower bits. i.e. 0x3000 => 0x0300
    shf 8 r7           # shift to lower bits. i.e. 0x0300 => 0x0003
    cp r7 r8           # 
    sub r3 r8          # compare with 10. i.e. 0xfff9
    ifp jmp letter     # r8 >= 10
    ifz jmp letter     # r8 == 10
        or r4 r7       # 0x003 | 0x0030 => 0x0033
        wl r7  ret
    letter:            # 
    add r5 r8          # 'A' + r5
    wl r8  ret         # print and return
endfunc
