[ ] zenx: ? ldr: load data from rom
[ ] zenx: ? at cpu boot copy a portion of rom to ram
[ ] zenx: ? txr transfer from rom long instruction
[ ] zenx: 1 cycle call, jmp, alu
      => for this to work ROM has to have valid data out at 'posedge' before any modules run the 'posedge' block
         when simulating there is a racing condition between Zenx and ROM
         where if Zenx runs first the instruction has not yet been updated by ROM
         ROM should have updated the instruction during the previous cycle (internally) and 
         put data out, first of all modules, at beginning of the next cycle
         a full cycle out of 2 is used for this situation to not happen
[ ] ldi data can be loaded into register in once cycle? 
[ ] built-in 4 leds set by 'led' and 'ledi' instructions
[ ] emulator webapp
------------------------------------------------------------------------------
[x] UartRx and UartTx have blocking assignments of bit_count. can implementation be changed to NBA?
[x]   UartRx
[x]   UartTx
[-] remove module Registers and implement the registers in Zenx
    => all modules can be implemented in Zenx but it is ok the to split up the concerns
[x] implement 'ret' on 'ldi' and 'w/r'
      => 'ret' from 'w/r' should work
[-] zenx: 1 cycle jmp: always @* if (is_jmp) pc = pc + {{(4){imm12[11]}}, imm12};
          doesn't work because 'is_jmp' is triggered by previous instruction (ldi data)
          during the ~100ps delay of rom data after "posedge clk"
          => changed implementation from IP to inferred block ram, 100ps delay gone
[-] zasm: assembled code missplaces the "endfunc" when before padded section.
      => comments are copied to generate better output for function declarations.
        => no good way of fixing it
[x] zasm: "endfunc" and labels have context within the function block
      => the source file is getting too big, maybe a project
[-] consider having more cores sharing the same rom and ram
      => 2 cores can run on same dual port rom/ram: Block Memory Generator v8.4 Product Guide (PG058) page 25
      => beyond the scope of this experiment
[x] zasm: "@ 0x800" puts 'pc' to 0x800
[x] zasm: does not include trailing comments at the end of file
[x] assembler
[x]   => one file java executable 'zasm', happy path implemented
[x]   => bounds checking on immediate values
[x]   pad hex file to 64K
[x]   write hex with source annotations
        => no comments, no labels, just program counter and source position + trimmed source
[x]     => improve source annotations to include comments and labels
[x]         => all comments and labels are in the hex file but not good enough
[x]            => better output but the code is messy
[-] reduce instruction cycles where possible since rom and ram has 1 cycle latency
      rom data arrives one cycle + ~100ps and a full cycle is wasted because of that
        https://support.xilinx.com/s/question/0D52E00006hpSrzSAE/100-ps-delay-for-block-memory-generator-63?language=en_US
        => try adding a delay of 1ns in the always block
          => it overlaps the next cycle by 1ns. how to end the cycle as if there was no delay
            => delays are not synthesised 
      => rom data has to arrive first before any other module processes posedge or else there is racing
[-] consider making rom 64K and ram 32K to represent a retro computer with 64K program cartidge
    => data segment needs to be copied from rom to ram
[x] review messy code in UartRx and UartTx
      => UartTx saves a cycle and makes possible for baud rate to be clock frequency
      => UartTx reads the first 'tick' of the next state and needs to be compensated 
         + can be run with baud rate being clock frequency
      => somewhat messy but ok
[x] zenx: consolidate multiple steps and compare resources used on the board
      => uses slightly less resources. compare:
         notes/screenshots/Screenshot from 2023-05-15 18-41-58.png
         notes/screenshots/Screenshot from 2023-05-15 19-06-43.png
[x] set baud rate to something low in the spirit of retro computers
      => 9600
[x] review uart_tx => can operate at BAUD == CLOCK_FREQ
[x] review uart_rx => can operate at BAUD == CLOCK_FREQ / 2
[x] racing: at call Zn and Calls are racing for the zn-flags
      => Calls copies flags at posedge then Zn clears flags at negedge
      at return: Zn copies flags to 'next state' from Calls, Calls copies 'next state' from stack
        at negedge both update state from 'next state'. no racing se "Screenshot from 2023-05-15 10-03-26"
[-]   'await' instruction that waits for interrupt then continues 
        => out of scope of this project
[-] interrupts => out of scope for this experiment
[x] uart
[x]   send "hello world" => "HELLO "
[x]   echo
[x] i/o
[x]   step 1: blocking uart
[x]           writes lower 8 bits of r2 to uart
[x]           writes higher 8 bits of r2 to uart
[x]           reads 8 bits from uart into lower r2
[x]           reads 8 bits from uart into higher r2
[-]    step 2: non-blocking uart
[x] uart to operate on negedge to save a cycle
[x] uart simulation operate with baud rate same as clock frequency
[x] uart 'cat todo.txt > /dev/ttyUSB1' hangs at same location in the file
    => while data is being sent new data received is skipped
[-] Calls: consolidate push, pop, en to en, sel
      => it gets messy because many combos use push or pop flag
[x] parameterize
[x] check if racing between
[x]   Calls vs Zn
[x]   Calls vs zenx
[x]   zenx vs Zn
[x]   zenx: negedge clk uses comb.condition that is modified during the same time
       => does that during the second cycle while the combo is done during first
[x] call
[x] ret
[x] jmp
[x] zn
[x] is_do_op
[x] st
[x] ld
[x] alu
[x] ldi
